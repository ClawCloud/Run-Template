apiVersion: app.claw.cloud/v1
kind: Template
metadata:
  name: dify
spec:
  title: 'Dify'
  type: official
  author: ClawCloud Run
  author_id: 180503656
  date: 2025-04-17
  url: 'https://dify.ai/'
  gitRepo: 'https://github.com/langgenius/dify'
  description: "Dify is an open-source LLM app development platform."
  readme: 'https://raw.githubusercontent.com/ClawCloud/Run-Template/refs/heads/main/template/dify/README.md'
  images:
    - 'https://raw.githubusercontent.com/ClawCloud/Run-Template/refs/heads/main/template/dify/Picture1.png'
    - 'https://raw.githubusercontent.com/ClawCloud/Run-Template/refs/heads/main/template/dify/Picture2.png'
    - 'https://raw.githubusercontent.com/ClawCloud/Run-Template/refs/heads/main/template/dify/Picture3.png'
  icon: 'https://avatars.githubusercontent.com/u/127165244?s=200&v=4'
  templateType: inline
  locale: en
  categories:
    - ai
  defaults:
    app_name:
      type: string
      value: dify-${{ random(8) }}
    app_host:
      type: string
      value: ${{ random(8) }}
    app_host_api:
      type: string
      value: ${{ random(8) }}
    secret_key:
      type: string
      value: sk-${{ random(45) }}
    inner_api_key:
      type: string
      value: sk-${{ random(32) }}
    plugin_daemon_key:
      type: string
      value: sk-${{ random(32) }}
  inputs:
    init_password:
      description: 'admin init password'
      type: string
      default: ''
      required: true

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${{ defaults.app_name }}-api
  annotations:
    originImageName: langgenius/dify-api:1.4.1
    deploy.run.claw.cloud/minReplicas: '1'
    deploy.run.claw.cloud/maxReplicas: '1'
  labels:
    run.claw.cloud/app-deploy-manager: ${{ defaults.app_name }}-api
    app: ${{ defaults.app_name }}-api
spec:
  replicas: 1
  revisionHistoryLimit: 1
  minReadySeconds: 10
  serviceName: ${{ defaults.app_name }}-api
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}-api
  template:
    metadata:
      labels:
        app: ${{ defaults.app_name }}-api
    spec:
      terminationGracePeriodSeconds: 10
      automountServiceAccountToken: false
      initContainers:
        - name: wait-db
          image: senzing/postgresql-client:2.2.4
          imagePullPolicy: IfNotPresent
          env:
            - name: PG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: username
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: password
            - name: PG_PORT
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: port
            - name: DATABASE_URL
              value: postgresql://$(PG_USERNAME):$(PG_PASSWORD)@${{ defaults.app_name }}-pg-postgresql.${{ CLAWCLOUD_NAMESPACE }}.svc:$(PG_PORT)
          command:
            - /bin/sh
            - -c
            - |
              until pg_isready -d $(DATABASE_URL); do
                echo "Waiting for database to start..."
                sleep 2
              done
              echo "Database is ready"
              until psql ${DATABASE_URL} -lqt | cut -d \| -f 1 | grep -qw dify; do
                echo "Waiting for dify database to be created..."
                sleep 5
              done
              echo "Dify database is ready"
      containers:
        - name: ${{ defaults.app_name }}-api
          image: langgenius/dify-api:1.4.1
          env:
            - name: MODE
              value: api
            - name: LOG_LEVEL
              value: INFO
            - name: SECRET_KEY
              value: ${{ defaults.secret_key }}
            - name: CONSOLE_WEB_URL
              value: https://${{ defaults.app_host }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
            - name: INIT_PASSWORD
              value: ${{ inputs.init_password }}
            - name: CONSOLE_API_URL
              value: https://${{ defaults.app_host_api }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
            - name: SERVICE_API_URL
              value: https://${{ defaults.app_host_api }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
            - name: APP_API_URL
              value: https://${{ defaults.app_host_api }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
            - name: FILES_URL
              value: ''
            - name: MIGRATION_ENABLED
              value: 'true'
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: password
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: host
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: port
            - name: DB_DATABASE
              value: dify
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-redis-conn-credential
                  key: host
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-redis-conn-credential
                  key: port
            - name: REDIS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-redis-conn-credential
                  key: username
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-redis-conn-credential
                  key: password
            - name: REDIS_USE_SSL
              value: 'false'
            - name: REDIS_DB
              value: '0'
            - name: CELERY_BROKER_URL
              value: redis://$(REDIS_USERNAME):$(REDIS_PASSWORD)@$(REDIS_HOST).${{ CLAWCLOUD_NAMESPACE }}.svc:$(REDIS_PORT)/1
            - name: WEB_API_CORS_ALLOW_ORIGINS
              value: '*'
            - name: CONSOLE_CORS_ALLOW_ORIGINS
              value: '*'
            - name: STORAGE_TYPE
              value: 'opendal'
            - name: OPENDAL_SCHEME
              value: 'fs'
            - name: OPENDAL_FS_ROOT
              value: 'storage'
            - name: STORAGE_LOCAL_PATH
              value: '/app/api/storage'
            - name: VECTOR_STORE
              value: 'weaviate'
            - name: WEAVIATE_HOST
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-weaviate-conn-credential
                  key: host
            - name: WEAVIATE_PORT
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-weaviate-conn-credential
                  key: port
            - name: WEAVIATE_ENDPOINT
              value: http://$(WEAVIATE_HOST):$(WEAVIATE_PORT)
            - name: WEAVIATE_API_KEY
              value: ""
            - name: CODE_EXECUTION_ENDPOINT
              value: http://${{ defaults.app_name }}-sandbox.${{ CLAWCLOUD_NAMESPACE }}.svc:8194
            - name: CODE_EXECUTION_API_KEY
              value: dify-sandbox
            - name: CODE_MAX_NUMBER
              value: '9223372036854775807'
            - name: CODE_MIN_NUMBER
              value: '-9223372036854775808'
            - name: CODE_MAX_STRING_LENGTH
              value: '80000'
            - name: TEMPLATE_TRANSFORM_MAX_LENGTH
              value: '80000'
            - name: CODE_MAX_STRING_ARRAY_LENGTH
              value: '30'
            - name: CODE_MAX_OBJECT_ARRAY_LENGTH
              value: '30'
            - name: CODE_MAX_NUMBER_ARRAY_LENGTH
              value: '1000'
            - name: CONSOLE_API_URL
              value: https://${{ defaults.app_host_api }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
            - name: CONSOLE_WEB_URL
              value: https://${{ defaults.app_host }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
            - name: APP_WEB_URL
              value: https://${{ defaults.app_host }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
            - name: SERVICE_API_URL
              value: https://${{ defaults.app_host_api }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
            - name: PLUGIN_DAEMON_URL
              value: http://${{ defaults.app_name }}-plugin-daemon:5002
            - name: PLUGIN_DAEMON_KEY
              value: ${{ defaults.plugin_daemon_key }}
            - name: PLUGIN_REMOTE_INSTALL_HOST
              value: ${{ defaults.app_name }}-plugin-daemon
            - name: PLUGIN_REMOTE_INSTALL_PORT
              value: '5003'
            - name: PLUGIN_MAX_PACKAGE_SIZE
              value: '52428800'
            - name: INNER_API_KEY_FOR_PLUGIN
              value: ${{ defaults.inner_api_key }}
          resources:
            requests:
              cpu: 100m
              memory: 104Mi
              ephemeral-storage: 200Mi
            limits:
              cpu: 1000m
              memory: 1Gi
              ephemeral-storage: 200Mi
          ports:
            - containerPort: 5001
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: vn-appvn-apivn-storage
              mountPath: /app/api/storage
        - name: ${{ defaults.app_name }}-worker
          image: langgenius/dify-api:1.4.1
          env:
            - name: MODE
              value: worker
            - name: LOG_LEVEL
              value: INFO
            - name: SECRET_KEY
              value: ${{ defaults.secret_key }}
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: password
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: host
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: port
            - name: DB_DATABASE
              value: dify
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-redis-conn-credential
                  key: host
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-redis-conn-credential
                  key: port
            - name: REDIS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-redis-conn-credential
                  key: username
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-redis-conn-credential
                  key: password
            - name: REDIS_USE_SSL
              value: 'false'
            - name: REDIS_DB
              value: '0'
            - name: CELERY_BROKER_URL
              value: redis://$(REDIS_USERNAME):$(REDIS_PASSWORD)@$(REDIS_HOST).${{ CLAWCLOUD_NAMESPACE }}.svc:$(REDIS_PORT)/1
            - name: WEB_API_CORS_ALLOW_ORIGINS
              value: '*'
            - name: CONSOLE_CORS_ALLOW_ORIGINS
              value: '*'
            - name: STORAGE_TYPE
              value: 'opendal'
            - name: OPENDAL_SCHEME
              value: 'fs'
            - name: OPENDAL_FS_ROOT
              value: 'storage'
            - name: STORAGE_LOCAL_PATH
              value: '/app/api/storage'
            - name: VECTOR_STORE
              value: 'weaviate'
            - name: WEAVIATE_HOST
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-weaviate-conn-credential
                  key: host
            - name: WEAVIATE_PORT
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-weaviate-conn-credential
                  key: port
            - name: WEAVIATE_ENDPOINT
              value: http://$(WEAVIATE_HOST):$(WEAVIATE_PORT)
            - name: WEAVIATE_API_KEY
              value: ""
            - name: CONSOLE_API_URL
              value: https://${{ defaults.app_host_api }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
            - name: CONSOLE_WEB_URL
              value: https://${{ defaults.app_host }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
            - name: APP_WEB_URL
              value: https://${{ defaults.app_host }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
            - name: SERVICE_API_URL
              value: https://${{ defaults.app_host_api }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
            - name: PLUGIN_DAEMON_URL
              value: http://${{ defaults.app_name }}-plugin-daemon:5002
            - name: PLUGIN_DAEMON_KEY
              value: ${{ defaults.plugin_daemon_key }}
            - name: PLUGIN_REMOTE_INSTALL_HOST
              value: ${{ defaults.app_name }}-plugin-daemon
            - name: PLUGIN_REMOTE_INSTALL_PORT
              value: '5003'
            - name: PLUGIN_MAX_PACKAGE_SIZE
              value: '52428800'
            - name: INNER_API_KEY_FOR_PLUGIN
              value: ${{ defaults.inner_api_key }}
          resources:
            requests:
              cpu: 100m
              memory: 102Mi
              ephemeral-storage: 200Mi
            limits:
              cpu: 1000m
              memory: 1Gi
              ephemeral-storage: 200Mi
          ports:
            - containerPort: 5001
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: vn-appvn-apivn-storage
              mountPath: /app/api/storage
  volumeClaimTemplates:
    - metadata:
        annotations:
          path: /app/api/storage
          value: '1'
        name: vn-appvn-apivn-storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}-api
  labels:
    run.claw.cloud/app-deploy-manager: ${{ defaults.app_name }}-api
spec:
  ports:
    - port: 5001
  selector:
    app: ${{ defaults.app_name }}-api

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${{ defaults.app_name }}-api
  labels:
    run.claw.cloud/app-deploy-manager: ${{ defaults.app_name }}-api
    run.claw.cloud/app-deploy-manager-domain: ${{ defaults.app_host_api }}
  annotations:
    kubernetes.io/ingress.class: nginx
    higress.io/response-header-control-remove: X-Frame-Options
    higress.io/response-header-control-update: |
      Content-Security-Policy "default-src * blob: data: *.${{ CLAWCLOUD_CLOUD_DOMAIN }} ${{ CLAWCLOUD_CLOUD_DOMAIN }}; img-src * data: blob: resource: *.${{ CLAWCLOUD_CLOUD_DOMAIN }} ${{ CLAWCLOUD_CLOUD_DOMAIN }}; connect-src * wss: blob: resource:; style-src 'self' 'unsafe-inline' blob: *.${{ CLAWCLOUD_CLOUD_DOMAIN }} ${{ CLAWCLOUD_CLOUD_DOMAIN }} resource:; script-src 'self' 'unsafe-inline' 'unsafe-eval' blob: *.${{ CLAWCLOUD_CLOUD_DOMAIN }} ${{ CLAWCLOUD_CLOUD_DOMAIN }} resource: *.baidu.com *.bdstatic.com; frame-src 'self' *.${{ CLAWCLOUD_CLOUD_DOMAIN }} ${{ CLAWCLOUD_CLOUD_DOMAIN }} mailto: tel: weixin: mtt: *.baidu.com; frame-ancestors 'self' https://${{ CLAWCLOUD_CLOUD_DOMAIN }} https://*.${{ CLAWCLOUD_CLOUD_DOMAIN }}"
      X-Xss-Protection "1; mode=block"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_clear_headers "X-Frame-Options:";
      more_set_headers "Content-Security-Policy: default-src * blob: data: *.${{ CLAWCLOUD_CLOUD_DOMAIN }} ${{ CLAWCLOUD_CLOUD_DOMAIN }}; img-src * data: blob: resource: *.${{ CLAWCLOUD_CLOUD_DOMAIN }} ${{ CLAWCLOUD_CLOUD_DOMAIN }}; connect-src * wss: blob: resource:; style-src 'self' 'unsafe-inline' blob: *.${{ CLAWCLOUD_CLOUD_DOMAIN }} ${{ CLAWCLOUD_CLOUD_DOMAIN }} resource:; script-src 'self' 'unsafe-inline' 'unsafe-eval' blob: *.${{ CLAWCLOUD_CLOUD_DOMAIN }} ${{ CLAWCLOUD_CLOUD_DOMAIN }} resource: *.baidu.com *.bdstatic.com; frame-src 'self' *.${{ CLAWCLOUD_CLOUD_DOMAIN }} ${{ CLAWCLOUD_CLOUD_DOMAIN }} mailto: tel: weixin: mtt: *.baidu.com; frame-ancestors 'self' https://${{ CLAWCLOUD_CLOUD_DOMAIN }} https://*.${{ CLAWCLOUD_CLOUD_DOMAIN }}";
      more_set_headers "X-Xss-Protection: 1; mode=block";
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://${{ CLAWCLOUD_CLOUD_DOMAIN }}, https://*.${{ CLAWCLOUD_CLOUD_DOMAIN }}"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT, Keep-Alive, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type, Range, Authorization, X-App-Code"
    nginx.ingress.kubernetes.io/cors-max-age: "600"
spec:
  rules:
    - host: ${{ defaults.app_host_api }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: ${{ defaults.app_name }}-api
                port:
                  number: 5001
  tls:
    - hosts:
        - ${{ defaults.app_host_api }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
      secretName: ${{ CLAWCLOUD_CERT_SECRET_NAME }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{ defaults.app_name }}-web
  annotations:
    originImageName: langgenius/dify-web:1.4.1
    deploy.run.claw.cloud/minReplicas: '1'
    deploy.run.claw.cloud/maxReplicas: '1'
  labels:
    run.claw.cloud/app-deploy-manager: ${{ defaults.app_name }}-web
    app: ${{ defaults.app_name }}-web
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}-web
  template:
    metadata:
      labels:
        app: ${{ defaults.app_name }}-web
    spec:
      automountServiceAccountToken: false
      initContainers:
        - name: wait-db
          image: senzing/postgresql-client:2.2.4
          imagePullPolicy: IfNotPresent
          env:
            - name: PG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: username
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: password
            - name: PG_PORT
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: port
            - name: DATABASE_URL
              value: postgresql://$(PG_USERNAME):$(PG_PASSWORD)@${{ defaults.app_name }}-pg-postgresql.${{ CLAWCLOUD_NAMESPACE }}.svc:$(PG_PORT)
          command:
            - /bin/sh
            - -c
            - |
              until pg_isready -d $(DATABASE_URL); do
                echo "Waiting for database to start..."
                sleep 2
              done
              echo "Database is ready"
              until psql ${DATABASE_URL} -lqt | cut -d \| -f 1 | grep -qw dify; do
                echo "Waiting for dify database to be created..."
                sleep 5
              done
              echo "Dify database is ready"
      containers:
        - name: ${{ defaults.app_name }}-web
          image: langgenius/dify-web:1.4.1
          env:
            - name: EDITION
              value: SELF_HOSTED
            - name: CONSOLE_API_URL
              value: https://${{ defaults.app_host_api }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
            - name: CONSOLE_WEB_URL
              value: https://${{ defaults.app_host }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
            - name: APP_API_URL
              value: https://${{ defaults.app_host_api }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
            - name: APP_WEB_URL
              value: https://${{ defaults.app_host }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
            - name: SERVICE_API_URL
              value: https://${{ defaults.app_host_api }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
            - name: MARKETPLACE_API_URL
              value: https://marketplace.dify.ai
            - name: MARKETPLACE_URL
              value: https://marketplace.dify.ai
          resources:
            requests:
              cpu: 100m
              memory: 102Mi
            limits:
              cpu: 1
              memory: 1Gi
          ports:
            - containerPort: 3000
          imagePullPolicy: IfNotPresent
---
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}-web
  labels:
    run.claw.cloud/app-deploy-manager: ${{ defaults.app_name }}-web
spec:
  ports:
    - port: 3000
  selector:
    app: ${{ defaults.app_name }}-web

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${{ defaults.app_name }}-web
  labels:
    run.claw.cloud/app-deploy-manager: ${{ defaults.app_name }}-web
    run.claw.cloud/app-deploy-manager-domain: ${{ defaults.app_host }}
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    - host: ${{ defaults.app_host }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: ${{ defaults.app_name }}-web
                port:
                  number: 3000
  tls:
    - hosts:
        - ${{ defaults.app_host }}.${{ CLAWCLOUD_CLOUD_DOMAIN }}
      secretName: ${{ CLAWCLOUD_CERT_SECRET_NAME }}

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${{ defaults.app_name }}-sandbox
  annotations:
    originImageName: langgenius/dify-sandbox:0.2.12
    deploy.run.claw.cloud/minReplicas: '1'
    deploy.run.claw.cloud/maxReplicas: '1'
  labels:
    run.claw.cloud/app-deploy-manager: ${{ defaults.app_name }}-sandbox
    app: ${{ defaults.app_name }}-sandbox
spec:
  replicas: 1
  revisionHistoryLimit: 1
  minReadySeconds: 10
  serviceName: ${{ defaults.app_name }}-sandbox
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}-sandbox
  template:
    metadata:
      labels:
        app: ${{ defaults.app_name }}-sandbox
    spec:
      terminationGracePeriodSeconds: 10
      automountServiceAccountToken: false
      containers:
        - name: ${{ defaults.app_name }}-sandbox
          image: langgenius/dify-sandbox:0.2.12
          env:
            - name: API_KEY
              value: dify-sandbox
            - name: GIN_MODE
              value: 'release'
            - name: WORKER_TIMEOUT
              value: '15'
            - name: ENABLE_NETWORK
              value: 'true'
          resources:
            requests:
              cpu: 100m
              memory: 102Mi
              ephemeral-storage: 200Mi
            limits:
              cpu: 1
              memory: 1Gi
              ephemeral-storage: 200Mi
          ports:
            - containerPort: 8194
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: vn-dependencies
              mountPath: /dependencies
  volumeClaimTemplates:
    - metadata:
        annotations:
          path: /dependencies
          value: '1'
        name: vn-dependencies
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
---

apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}-sandbox
  labels:
    run.claw.cloud/app-deploy-manager: ${{ defaults.app_name }}-sandbox
spec:
  ports:
    - port: 8194
  selector:
    app: ${{ defaults.app_name }}-sandbox

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${{ defaults.app_name }}-plugin-daemon
  annotations:
    originImageName: langgenius/dify-plugin-daemon:0.1.1-local
    deploy.run.claw.cloud/minReplicas: '1'
    deploy.run.claw.cloud/maxReplicas: '1'
  labels:
    run.claw.cloud/app-deploy-manager: ${{ defaults.app_name }}-plugin-daemon
    app: ${{ defaults.app_name }}-plugin-daemon
spec:
  replicas: 1
  revisionHistoryLimit: 1
  minReadySeconds: 10
  serviceName: ${{ defaults.app_name }}-plugin-daemon
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}-plugin-daemon
  template:
    metadata:
      labels:
        app: ${{ defaults.app_name }}-plugin-daemon
    spec:
      terminationGracePeriodSeconds: 10
      automountServiceAccountToken: false
      initContainers:
        - name: wait-db
          image: senzing/postgresql-client:2.2.4
          imagePullPolicy: IfNotPresent
          env:
            - name: PG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: username
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: password
            - name: PG_PORT
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: port
            - name: DATABASE_URL
              value: postgresql://$(PG_USERNAME):$(PG_PASSWORD)@${{ defaults.app_name }}-pg-postgresql.${{ CLAWCLOUD_NAMESPACE }}.svc:$(PG_PORT)
          command:
            - /bin/sh
            - -c
            - |
              until pg_isready -d $(DATABASE_URL); do
                echo "Waiting for database to start..."
                sleep 2
              done
              echo "Database is ready"
              until psql ${DATABASE_URL} -lqt | cut -d \| -f 1 | grep -qw dify; do
                echo "Waiting for dify database to be created..."
                sleep 5
              done
              echo "Dify database is ready"
      containers:
        - name: ${{ defaults.app_name }}-plugin-daemon
          image: langgenius/dify-plugin-daemon:0.1.1-local
          env:
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: password
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: host
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: port
            - name: DB_DATABASE
              value: dify
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-redis-conn-credential
                  key: host
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-redis-conn-credential
                  key: port
            - name: REDIS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-redis-conn-credential
                  key: username
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-redis-conn-credential
                  key: password
            - name: REDIS_USE_SSL
              value: 'false'
            - name: REDIS_DB
              value: '0'
            - name: DB_DATABASE
              value: dify_plugin
            - name: SERVER_PORT
              value: '5002'
            - name: SERVER_KEY
              value: ${{ defaults.plugin_daemon_key }}
            - name: MAX_PLUGIN_PACKAGE_SIZE
              value: '52428800'
            - name: PPROF_ENABLED
              value: 'false'
            - name: DIFY_INNER_API_URL
              value: http://${{ defaults.app_name }}-api:5001
            - name: DIFY_INNER_API_KEY
              value: ${{ defaults.inner_api_key }}
            - name: PLUGIN_REMOTE_INSTALLING_HOST
              value: localhost
            - name: PLUGIN_REMOTE_INSTALLING_PORT
              value: '5003'
            - name: PLUGIN_WORKING_PATH
              value: /app/storage/cwd
            - name: FORCE_VERIFYING_SIGNATURE
              value: 'true'
          resources:
            requests:
              cpu: 100m
              memory: 102Mi
              ephemeral-storage: 200Mi
            limits:
              cpu: 1
              memory: 1Gi
              ephemeral-storage: 200Mi
          ports:
            - name: server-port
              containerPort: 5002
            - name: remote-port
              containerPort: 5003
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: vn-appvn-storage
              mountPath: /app/storage
  volumeClaimTemplates:
    - metadata:
        annotations:
          path: /app/storage
          value: '1'
        name: vn-appvn-storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}-plugin-daemon
  labels:
    run.claw.cloud/app-deploy-manager: ${{ defaults.app_name }}-plugin-daemon
spec:
  ports:
    - name: server-port
      port: 5002
      containerPort: 5002
    - name: remote-port
      port: 5003
      containerPort: 5003
  selector:
    app: ${{ defaults.app_name }}-plugin-daemon

---

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    clawcloud-db-provider-cr: ${{ defaults.app_name }}-pg
    app.kubernetes.io/instance: ${{ defaults.app_name }}-pg
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-pg

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    clawcloud-db-provider-cr: ${{ defaults.app_name }}-pg
    app.kubernetes.io/instance: ${{ defaults.app_name }}-pg
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-pg
rules:
  - apiGroups:
      - '*'
    resources:
      - '*'
    verbs:
      - '*'

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    clawcloud-db-provider-cr: ${{ defaults.app_name }}-pg
    app.kubernetes.io/instance: ${{ defaults.app_name }}-pg
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-pg
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ${{ defaults.app_name }}-pg
subjects:
  - kind: ServiceAccount
    name: ${{ defaults.app_name }}-pg

---

apiVersion: apps.kubeblocks.io/v1alpha1
kind: Cluster
metadata:
  finalizers:
    - cluster.kubeblocks.io/finalizer
  labels:
    clusterdefinition.kubeblocks.io/name: postgresql
    clusterversion.kubeblocks.io/name: postgresql-14.8.0
    clawcloud-db-provider-cr: ${{ defaults.app_name }}-pg
  annotations: {}
  name: ${{ defaults.app_name }}-pg
spec:
  affinity:
    nodeLabels: {}
    podAntiAffinity: Preferred
    tenancy: SharedNode
    topologyKeys: []
  clusterDefinitionRef: postgresql
  clusterVersionRef: postgresql-14.8.0
  backup:
    enabled: true
    cronExpression: 0 18 * * *
    method: backupTool
    pitrEnabled: false
    retentionPeriod: 7d
  componentSpecs:
    - componentDefRef: postgresql
      monitor: true
      name: postgresql
      replicas: 1
      resources:
        limits:
          cpu: 1
          memory: 1Gi
        requests:
          cpu: 100m
          memory: 102Mi
      serviceAccountName: ${{ defaults.app_name }}-pg
      switchPolicy:
        type: Noop
      volumeClaimTemplates:
        - name: data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 3Gi

  terminationPolicy: Delete
  tolerations: []

---

apiVersion: batch/v1
kind: Job
metadata:
  name: ${{ defaults.app_name }}-pg-init
spec:
  completions: 1
  template:
    spec:
      containers:
        - name: pgsql-init
          image: senzing/postgresql-client:2.2.4
          env:
            - name: PG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: username
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: password
            - name: PG_PORT
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: port
            - name: DATABASE_URL
              value: postgresql://$(PG_USERNAME):$(PG_PASSWORD)@${{ defaults.app_name }}-pg-postgresql.${{ CLAWCLOUD_NAMESPACE }}.svc:$(PG_PORT)
          command:
            - /bin/sh
            - -c
            - |
              until psql ${DATABASE_URL} -c 'CREATE DATABASE dify;' &>/dev/null; do sleep 1; done
              until psql ${DATABASE_URL} -c 'CREATE DATABASE dify_plugin;' &>/dev/null; do sleep 1; done
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 51Mi
      restartPolicy: Never
  backoffLimit: 0
  ttlSecondsAfterFinished: 300

---

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    clawcloud-db-provider-cr: ${{ defaults.app_name }}-redis
    app.kubernetes.io/instance: ${{ defaults.app_name }}-redis
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-redis

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    clawcloud-db-provider-cr: ${{ defaults.app_name }}-redis
    app.kubernetes.io/instance: ${{ defaults.app_name }}-redis
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-redis
rules:
  - apiGroups:
      - '*'
    resources:
      - '*'
    verbs:
      - '*'

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    clawcloud-db-provider-cr: ${{ defaults.app_name }}-redis
    app.kubernetes.io/instance: ${{ defaults.app_name }}-redis
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-redis
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ${{ defaults.app_name }}-redis
subjects:
  - kind: ServiceAccount
    name: ${{ defaults.app_name }}-redis

---

apiVersion: apps.kubeblocks.io/v1alpha1
kind: Cluster
metadata:
  finalizers:
    - cluster.kubeblocks.io/finalizer
  labels:
    clusterdefinition.kubeblocks.io/name: redis
    clusterversion.kubeblocks.io/name: redis-7.0.6
    clawcloud-db-provider-cr: ${{ defaults.app_name }}-redis
  annotations: {}
  name: ${{ defaults.app_name }}-redis
spec:
  affinity:
    nodeLabels: {}
    podAntiAffinity: Preferred
    tenancy: SharedNode
    topologyKeys: []
  clusterDefinitionRef: redis
  clusterVersionRef: redis-7.0.6
  componentSpecs:
    - componentDefRef: redis
      monitor: true
      name: redis
      replicas: 1
      resources:
        limits:
          cpu: 1
          memory: 1Gi
        requests:
          cpu: 100m
          memory: 100Mi
      serviceAccountName: ${{ defaults.app_name }}-redis
      switchPolicy:
        type: Noop
      volumeClaimTemplates:
        - name: data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 3Gi

    - componentDefRef: redis-sentinel
      monitor: true
      name: redis-sentinel
      replicas: 1
      resources:
        limits:
          cpu: 100m
          memory: 100Mi
        requests:
          cpu: 100m
          memory: 100Mi
      serviceAccountName: ${{ defaults.app_name }}-redis
  terminationPolicy: Delete
  tolerations: []

---

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    clawcloud-db-provider-cr: ${{ defaults.app_name }}-weaviate
    app.kubernetes.io/instance: ${{ defaults.app_name }}-weaviate
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-weaviate

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    clawcloud-db-provider-cr: ${{ defaults.app_name }}-weaviate
    app.kubernetes.io/instance: ${{ defaults.app_name }}-weaviate
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-weaviate
rules:
  - apiGroups:
      - '*'
    resources:
      - '*'
    verbs:
      - '*'

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    clawcloud-db-provider-cr: ${{ defaults.app_name }}-weaviate
    app.kubernetes.io/instance: ${{ defaults.app_name }}-weaviate
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-weaviate
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ${{ defaults.app_name }}-weaviate
subjects:
  - kind: ServiceAccount
    name: ${{ defaults.app_name }}-weaviate

---

apiVersion: apps.kubeblocks.io/v1alpha1
kind: Cluster
metadata:
  finalizers:
    - cluster.kubeblocks.io/finalizer
  labels:
    clusterdefinition.kubeblocks.io/name: weaviate
    clusterversion.kubeblocks.io/name: weaviate-1.18.0
  name: ${{ defaults.app_name }}-weaviate
spec:
  affinity:
    podAntiAffinity: Preferred
    tenancy: SharedNode
  clusterDefinitionRef: weaviate
  clusterVersionRef: weaviate-1.18.0
  componentSpecs:
    - componentDefRef: weaviate
      monitor: false
      name: weaviate
      noCreatePDB: false
      replicas: 1
      resources:
        limits:
          cpu: 1
          memory: 1Gi
        requests:
          cpu: 100m
          memory: 102Mi
      rsmTransformPolicy: ToSts
      serviceAccountName: ${{ defaults.app_name }}-weaviate
      volumeClaimTemplates:
        - name: data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 3Gi
  monitor: {}
  resources:
    cpu: '0'
    memory: '0'
  storage:
    size: '0'
  terminationPolicy: Delete
